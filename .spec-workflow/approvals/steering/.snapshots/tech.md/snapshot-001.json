{
  "id": "snapshot_1759328084934_oitiqbuvi",
  "approvalId": "approval_1759328084928_t5jlqubk8",
  "approvalTitle": "Technology Stack Document",
  "version": 1,
  "timestamp": "2025-10-01T14:14:44.934Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Technology Stack\r\n\r\n## Project Type\r\n\r\n**Co-located Multi-user VR Game/Research Application** - Unity-based VR experience for Meta Quest 3 headsets with advanced networking, safety systems, and research instrumentation for investigating co-located VR challenges.\r\n\r\n## Core Technologies\r\n\r\n### Primary Language(s)\r\n- **Language**: C# 9.0+ (.NET Standard 2.1 compatibility for Unity)\r\n- **Runtime/Compiler**: Unity 2022.3+ LTS with IL2CPP for Android builds\r\n- **Language-specific tools**: NuGet package management through Unity Package Manager, Unity Test Framework, Unity Analytics\r\n\r\n### Key Dependencies/Libraries\r\n\r\n**VR & Input Systems:**\r\n- **XR Interaction Toolkit 2.5+**: Unity's official VR interaction framework for hand tracking, input handling, and UI interaction\r\n- **Unity XR Hands 1.4+**: Advanced hand tracking support for Meta Quest 3 (already integrated based on project structure)\r\n- **OpenXR 1.8+**: Cross-platform VR standard for headset compatibility and future-proofing\r\n\r\n**Networking & Synchronization:**\r\n- **Netcode for GameObjects 1.7+**: Unity's official multiplayer networking solution for real-time avatar synchronization\r\n- **Unity Transport 2.0+**: Low-level networking transport layer optimized for real-time communication\r\n- **Unity Relay/Lobby**: Optional cloud networking services for connection management (if needed for research flexibility)\r\n\r\n**Safety & Physics:**\r\n- **Unity Physics**: Built-in collision detection and proximity monitoring for safety systems\r\n- **Unity XR Guardian**: Integration with Meta Quest Guardian system for physical boundary management\r\n- **Custom Collision Prevention System**: Project-specific safety algorithms for co-located user protection\r\n\r\n### Application Architecture\r\n\r\n**Event-Driven Multi-user VR Architecture** with the following layers:\r\n\r\n1. **VR Input Layer**: XR Interaction Toolkit handles all headset input, hand tracking, and controller events\r\n2. **Networking Layer**: Netcode for GameObjects manages state synchronization between 3 clients\r\n3. **Safety System Layer**: Real-time collision detection and prevention with escalating warning system\r\n4. **Game Logic Layer**: Avatar management, scene interaction, and research data collection\r\n5. **Research Instrumentation Layer**: Data logging, performance monitoring, and interference tracking\r\n\r\n**Component Structure:**\r\n- **Modular Safety-First Design**: Safety systems operate independently and can override all other systems\r\n- **Client-Server Model**: One headset acts as host, others as clients (with server authority for safety)\r\n- **Event Bus Pattern**: Decoupled communication between VR input, networking, and safety systems\r\n\r\n### Data Storage\r\n\r\n- **Primary storage**: Unity ScriptableObjects for configuration, local files for research data logging\r\n- **Real-time data**: In-memory synchronization via Netcode NetworkVariables for avatar positions, rotations, states\r\n- **Research data**: JSON/CSV exports for tracking interference analysis, safety incident logging, performance metrics\r\n- **Configuration**: Unity's built-in serialization for project settings, safety thresholds, networking parameters\r\n\r\n### External Integrations\r\n\r\n- **Meta Quest Platform**: Native Android integration for Quest 3 hardware access, Guardian system, hand tracking\r\n- **Unity Analytics**: Built-in telemetry for performance monitoring and crash reporting during research phases\r\n- **Research Export Systems**: CSV/JSON data export for academic analysis of tracking interference and safety incidents\r\n- **Development Tools**: Unity Remote for testing, Unity Profiler for performance optimization\r\n\r\n### Monitoring & Dashboard Technologies\r\n\r\n- **Dashboard Framework**: Unity's built-in UI system (Canvas-based) with both VR and desktop monitoring interfaces\r\n- **Real-time Communication**: Netcode NetworkVariables for continuous synchronization of safety metrics, user positions, system status\r\n- **Visualization**: Unity's built-in GUI system with custom safety alert overlays, proximity warnings, tracking quality indicators\r\n- **State Management**: Centralized NetworkManager with safety system state taking precedence over all other states\r\n\r\n## Development Environment\r\n\r\n### Build & Development Tools\r\n\r\n- **Build System**: Unity's integrated build pipeline targeting Android (Meta Quest 3)\r\n- **Package Management**: Unity Package Manager for official packages, Git URLs for community packages\r\n- **Development workflow**: Unity Play Mode testing with XR simulation, build-and-deploy cycle for Quest 3 testing\r\n- **Version Control Integration**: Unity Smart Merge for scene and prefab collaboration\r\n\r\n### Code Quality Tools\r\n\r\n- **Static Analysis**: Unity Code Analysis package, Rider/Visual Studio Code analyzers for C#\r\n- **Formatting**: Unity's C# formatting guidelines, EditorConfig for consistent team standards\r\n- **Testing Framework**: Unity Test Framework for unit tests, NUnit for C# logic testing, integration tests for networking\r\n- **Documentation**: XML documentation comments, Unity documentation tools, research logging for academic purposes\r\n\r\n### Version Control & Collaboration\r\n\r\n- **VCS**: Git with Git LFS for Unity assets (textures, models, audio)\r\n- **Branching Strategy**: GitHub Flow with feature branches for research phases, main branch for stable builds\r\n- **Code Review Process**: Pull request reviews with mandatory safety system validation, Unity build testing in CI/CD\r\n\r\n### Dashboard Development\r\n\r\n- **Live Reload**: Unity's domain reload system for script changes, play mode testing for immediate feedback\r\n- **Multi-Instance Support**: Multiple Unity editor instances for multi-user development testing\r\n- **Device Testing**: Unity Remote for wireless testing, direct Quest 3 deployment via ADB\r\n\r\n## Deployment & Distribution\r\n\r\n- **Target Platform**: Meta Quest 3 (Android-based VR headset)\r\n- **Distribution Method**: Direct APK installation via Unity Build & Run, SideQuest for research sharing\r\n- **Installation Requirements**: Meta Quest 3 headsets (exactly 3), sufficient physical room space (minimum 2m x 2m per user), stable WiFi network for networking\r\n- **Update Mechanism**: Manual APK replacement during research phases, potential Oculus Store distribution for future public release\r\n\r\n## Technical Requirements & Constraints\r\n\r\n### Performance Requirements\r\n\r\n- **Frame Rate**: Maintain 90 FPS per headset (Quest 3 requirement) even with 3 active users\r\n- **Network Latency**: <20ms for avatar position synchronization to maintain safety system effectiveness\r\n- **Memory Usage**: <4GB RAM per headset (Quest 3 hardware constraint)\r\n- **Startup Time**: <30 seconds from launch to multi-user ready state\r\n- **Safety Response Time**: <100ms for collision detection and warning system activation\r\n\r\n### Compatibility Requirements\r\n\r\n- **Platform Support**: Meta Quest 3 exclusively (Android 10+, Snapdragon XR2 Gen 2)\r\n- **Unity Version**: 2022.3 LTS minimum for XR support and stability\r\n- **XR Standards**: OpenXR 1.8+ for future headset compatibility research\r\n- **Networking**: WiFi 5 (802.11ac) minimum for reliable real-time synchronization\r\n\r\n### Security & Compliance\r\n\r\n- **Privacy Requirements**: No personal data collection, local research data only, optional anonymized performance metrics\r\n- **Physical Safety**: Primary security concern - collision prevention system must never fail\r\n- **Network Security**: Local network operation preferred, encrypted communication for any cloud features\r\n- **Research Ethics**: IRB approval for any human subjects research, informed consent for safety testing\r\n\r\n### Scalability & Reliability\r\n\r\n- **Expected Load**: Exactly 3 concurrent users (fixed constraint for research scope)\r\n- **Availability**: 99% uptime during research sessions, graceful degradation if one headset disconnects\r\n- **Growth Projections**: Research extensibility for 4+ users in future studies, multi-room scenarios\r\n\r\n## Technical Decisions & Rationale\r\n\r\n### Decision Log\r\n\r\n1. **Unity + Meta Quest 3 Choice**: Unity provides mature VR development tools, C# enables rapid prototyping for research, Quest 3 offers consumer-grade affordability vs custom hardware, inside-out tracking enables investigation of interference scenarios\r\n   \r\n2. **Netcode for GameObjects over Mirror/Photon**: Official Unity support ensures long-term compatibility, built-in client-server authority model supports safety system requirements, lower barrier to entry for educational objectives\r\n\r\n3. **Client-Server Architecture over Peer-to-Peer**: Server authority enables safety system override capabilities, single source of truth for collision detection reduces conflicts, simpler debugging for research purposes\r\n\r\n4. **Safety-First System Design**: Physical user safety requires systems that can override all other functionality, independent collision detection system prevents interference from other subsystems, escalating warning system (visual → haptic → movement restriction) provides graduated response\r\n\r\n5. **Research Instrumentation as Core Feature**: Academic/educational objectives require comprehensive data collection, tracking interference investigation is primary research goal, performance metrics essential for cost-benefit analysis vs commercial solutions\r\n\r\n## Known Limitations\r\n\r\n- **Quest 3 Hardware Constraints**: Limited to Snapdragon XR2 Gen 2 processing power, 4GB RAM constraint may limit complex scenes, battery life requires charging rotation during extended research sessions\r\n\r\n- **Inside-Out Tracking Limitations**: Potential interference scenarios between multiple headsets not yet fully understood (primary research objective), tracking quality degrades in low-light conditions, limited tracking volume per headset\r\n\r\n- **Unity Networking Complexity**: Netcode for GameObjects learning curve for team members, real-time networking debugging requires specialized tools, network issues can cascade into safety system false positives\r\n\r\n- **Research vs Production Trade-offs**: Extensive logging and instrumentation may impact performance, research flexibility requirements add complexity vs streamlined production code, academic timeline constraints may limit optimization iterations\r\n\r\n- **Physical Space Requirements**: Minimum room size requirements limit deployment flexibility, room setup and calibration required for each research session, physical furniture and obstacles must be manually managed",
  "fileStats": {
    "size": 10441,
    "lines": 156,
    "lastModified": "2025-10-01T14:14:37.083Z"
  },
  "comments": []
}